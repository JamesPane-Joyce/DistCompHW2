Algorythms Needed

    Bully
    2 Phase Commit
    Zookeeper Atomic Broadcast

Necessary Datastructures

    Bully:
    Complete Graph of connections
        Correct and Updating Map to every every processes
            Map keys should likely be node nameConnection
        Should be able to detect when majority of nodes are dead (From ZAB)

    Every node must have a unique ID
        ID's in this case are the zxid of the most recent log item
            Must be a tiebreaking mechanic in case two nodes have the same logs
                This may be the nodes actual names(?) furthermore refered to as the nameConnection

    Every node much have a variable holding the nameConnection of the currentLeader

    Every node must have a boolean variable holding whether or not they are holding an election

    2 Phase Commits:
    Datastructure capable of holding expected receives from other nodes.
        Should be capable of detecting majorities
        Should be capable of detecting missing receive

    Zookeper Atomic Broadcast:
    An ordered list of received transactions (v, z) where z = (epoche, counter)
        Transactions will ordered by epoche, then counter.
        Transactions should be totally ordered, thus ties will not exist.
            Note: This does not apply to logs which can have the same transactions



Types of Messages Needed

    ELECTION for Bully
    OK for Bully
    COORDINATOR for Bully

    REQUEST for 2PC
    VOTE for 2PC
        Types can be VOTE_ABORT or VOTE_COMMIT
    DECIDE for 2PC
        Types can be DECIDE_COMMIT or DECIDE_ABORT

    CREATE for client_api
    DELETE for client_api
    READ for client_api
    APPEND for client_api
    CRASH for client_api testing/examination

    PROPOSAL for ZAB
    ACKNOWLEDGE for ZAB
    COMMIT for ZAB




