import javax.swing.*;
import java.awt.*;
import java.io.IOException;

/**
 * Created by james on 10/7/16.
 */
public class NodeWindow {
  private JTextField inputPane;
  private JTextPane outputPane;
  private JButton sendButton;
  public JPanel contentPane;
  private JScrollPane scroll;
  private final StringBuilder text = new StringBuilder("Hello. Acceptable commands are create, delete, read, append, and exit.\n");

  public NodeWindow(NodeConsole connection) {
    outputPane.setText(text.toString());
    sendButton.addActionListener(e -> {
      String message = inputPane.getText().trim();
      if (message.equals("")) {
        display("Please enter a command.");
        outputPane.setText(text.toString());
      } else {
        inputPane.setText("");
        display(message);
        if (!message.contains(" ") && message.equalsIgnoreCase("exit")) {
          display("Invalid Command.");
        } else if (message.equalsIgnoreCase("exit") || message.equalsIgnoreCase("quit")) {
          connection.close();
        } else {
          try {
            String[] command = message.split(" ");
            switch (command[0]) {
              case "create":
                if (command.length != 2) {
                  display("The create command only takes a filename as an argument.");
                } else {
                  connection.sendCreateCommand(command[1]);
                }
                break;
              case "delete":
                if (command.length != 2) {
                  display("The delete command only takes a filename as an argument.");
                } else {
                  connection.sendDeleteCommand(command[1]);
                }
                break;
              case "read":
                if (command.length != 2) {
                  display("The read command only takes a filename as an argument.");
                } else {
                  connection.sendReadCommand(command[1]);
                }
                break;
              case "append":
                if (command.length != 3) {
                  display("The append command takes a filename and a line of text as an argument.");
                } else {
                  connection.sendAppendCommand(command[1], message.substring(message.indexOf(" ", message.indexOf(" ") + 1) + 1));
                }
                break;
              default:
                display("Invalid Command.");
                break;
            }
          } catch (IOException ignored) {}
        }
      }
    });
  }

  public void display(String... messages) {
    for (String message : messages) {
      text.append(message);
      if (message.charAt(message.length() - 1) != '\n') {
        text.append('\n');
      }
      outputPane.setText(text.toString());
    }
    outputPane.setCaretPosition(outputPane.getDocument().getLength());
    contentPane.repaint();
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
    scroll = new JScrollPane();
    contentPane.add(scroll, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 300), null, 0, false));
    outputPane = new JTextPane();
    outputPane.setEditable(false);
    scroll.setViewportView(outputPane);
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    inputPane = new JTextField();
    panel1.add(inputPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, -1), null, 0, false));
    sendButton = new JButton();
    sendButton.setText("Send");
    panel1.add(sendButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() { return contentPane; }
}
